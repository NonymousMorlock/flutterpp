on:
  push:
    branches: [main]

name: Release Artifacts

jobs:
  build-macos:
    name: "Build MacOS"
    runs-on: macos-latest
    timeout-minutes: 30
    env:
      GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}

    steps:
      - uses: actions/checkout@v2.4.0

      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2.6.1
        with:
          channel: "stable"

      - name: Set Up XCode
        uses: BoundfoxStudios/action-xcode-select@v1

      - name: Install create-dmg
        run: brew install create-dmg

      - name: Enable desktop
        run: flutter config --enable-macos-desktop

      - name: Install Cider
        run: flutter pub global activate cider

      - name: Set new Flutter version
        run: cider version ${{ github.event.release.tag_name }}

      - name: Set release changelog
        run: cider release

      - name: Flutter get packages
        run: flutter pub get

      - name: Setup Codesign
        # Extract the secrets we defined earlier as environment variables
        env:
          MACOS_CERTIFICATE: ${{ secrets.PROD_MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_PWD }}
          MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_NAME }}
          MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
        run: |
          # Turn our base64-encoded certificate back to a regular .p12 file

          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12

          # We need to create a new keychain, otherwise using the certificate will prompt
          # with a UI dialog asking for the certificate password, which we can't
          # use in a headless CI environment

          security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" build.keychain

      - name: Flutter build app
        run: flutter build macos --release

      - name: Codesign app
        env:
          MACOS_CERTIFICATE: ${{ secrets.PROD_MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_PWD }}
          MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_NAME }}
          MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
        run: |
          # We finally codesign our app bundle, specifying the Hardened runtime option
          /usr/bin/codesign --force -s "$MACOS_CERTIFICATE_NAME" --options runtime build/macos/Build/Products/Release/FlutterPP.app -v

      - name: "Notarize app bundle"
        # Extract the secrets we defined earlier as environment variables
        env:
          PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
          PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
          PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}
        run: |
          # Store the notarization credentials so that we can prevent a UI password dialog
          # from blocking the CI

          echo "Create keychain profile"
          xcrun notarytool store-credentials "notarytool-profile" --apple-id "$PROD_MACOS_NOTARIZATION_APPLE_ID" --team-id "$PROD_MACOS_NOTARIZATION_TEAM_ID" --password "$PROD_MACOS_NOTARIZATION_PWD"

          # We can't notarize an app bundle directly, but we need to compress it as an archive.
          # Therefore, we create a zip file containing our app bundle, so that we can send it to the
          # notarization service

          echo "Creating temp notarization archive"
          ditto -c -k --keepParent "build/macos/Build/Products/Release/FlutterPP.app" "notarization.zip"

          # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
          # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
          # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
          # you're curious

          echo "Notarize app"
          xcrun notarytool submit "notarization.zip" --keychain-profile "notarytool-profile" --wait

          # Finally, we need to "attach the staple" to our executable, which will allow our app to be
          # validated by macOS even when an internet connection is not available.
          echo "Attach staple"
          xcrun stapler staple "build/macos/Build/Products/Release/FlutterPP.app"

      - name: Create dmg
        run: |
          ./scripts/create_mac_dmg.sh

      - name: Compress artifacts
        run: zip -r macos-${{ github.event.release.tag_name }}.zip build/macos/Build/Products/Release

      - name: Upload artifacts to release
        uses: svenstaro/upload-release-action@2.2.1
        with:
          # GitHub token.
          repo_token: ${{ secrets.GIT_TOKEN }}
          # Local file to upload.
          file: macos-${{ github.event.release.tag_name }}.zip
          # Tag to use as a release.
          tag: ${{ github.ref }}

      - name: Upload DMG to release
        uses: svenstaro/upload-release-action@2.2.1
        with:
          # GitHub token.
          repo_token: ${{ secrets.GIT_TOKEN }}
          # Local file to upload.
          file: build/macos/Build/Products/Release/FlutterPP.dmg
          asset_name: FlutterPP-macos-${{ github.event.release.tag_name }}.dmg
          # Tag to use as a release.
          tag: ${{ github.ref }}
